<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/docs/arquitectura-clases.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/arquitectura-clases.md" />
              <option name="updatedContent" value="# Arquitectura de Clases — Sistema de Seguridad Concurrente&#10;&#10;```mermaid&#10;classDiagram&#10;    direction LR&#10;&#10;    class Sensor {&#10;      +processEvent(SensorEvent) SensorEvent&#10;      +requiresAlert(Double) boolean&#10;      +getSensorType() String&#10;      +simulateEvent() SensorEvent&#10;    }&#10;&#10;    class MotionSensor&#10;    class TemperatureSensor&#10;    class AccessControlSensor&#10;    Sensor &lt;|.. MotionSensor&#10;    Sensor &lt;|.. TemperatureSensor&#10;    Sensor &lt;|.. AccessControlSensor&#10;&#10;    class SensorSimulationService {&#10;      +simulateSensorEvents()&#10;      +simulateHighLoad()&#10;    }&#10;    class SensorProcessingService {&#10;      +processEventAsync(SensorEvent) CompletableFuture&#10;      +processBatchAsync(List~SensorEvent~) CompletableFuture&#10;      +buildStatsSnapshot() Map&#10;    }&#10;    class AlertService {&#10;      +createAlertFromEvent(SensorEvent) CompletableFuture~SecurityAlert~&#10;    }&#10;    class NotificationService {&#10;      +sendAlertNotifications(SecurityAlert)&#10;      +sendEventNotification(String, Object)&#10;    }&#10;    class StatsBroadcastService {&#10;      +broadcastStats()&#10;    }&#10;&#10;    class SecurityConfiguration&#10;    class WebSocketConfiguration&#10;    class AsyncConfiguration&#10;    class DataInitializer&#10;&#10;    class AuthenticationService&#10;    class JwtService&#10;    class JwtAuthenticationFilter&#10;&#10;    class SensorController&#10;    class AlertController&#10;    class AdminController&#10;    class AuthenticationController&#10;    class WebSocketController&#10;&#10;    class SensorEventRepository&#10;    class SecurityAlertRepository&#10;    class AccessLogRepository&#10;    class UserRepository&#10;&#10;    class SensorEvent&#10;    class SecurityAlert&#10;    class AccessLog&#10;    class User&#10;    class SensorType&#10;&#10;    SensorSimulationService --&gt; Sensor : usa&#10;    SensorSimulationService --&gt; SensorProcessingService : envía lotes&#10;    SensorProcessingService --&gt; Sensor : delega procesamiento&#10;    SensorProcessingService --&gt; SensorEventRepository : persiste&#10;    SensorProcessingService --&gt; NotificationService : WS stats/events&#10;    SensorProcessingService --&gt; AlertService : crea alertas&#10;&#10;    AlertService --&gt; SecurityAlertRepository : persiste&#10;    AlertService --&gt; NotificationService : notifica&#10;&#10;    NotificationService ..&gt; SimpMessagingTemplate : WebSocket&#10;    NotificationService ..&gt; JavaMailSender : Email&#10;&#10;    AuthenticationController --&gt; AuthenticationService : login&#10;    SecurityConfiguration --&gt; JwtAuthenticationFilter : cadena&#10;    JwtAuthenticationFilter --&gt; JwtService : valida JWT&#10;&#10;    AdminController ..&gt; UserService&#10;    UserService --&gt; UserRepository&#10;    DataInitializer --&gt; UserService&#10;&#10;    WebSocketController ..&gt; SimpMessagingTemplate&#10;&#10;    StatsBroadcastService ..&gt; SensorProcessingService&#10;&#10;    SensorEventRepository --&gt; SensorEvent&#10;    SecurityAlertRepository --&gt; SecurityAlert&#10;    AccessLogRepository --&gt; AccessLog&#10;    UserRepository --&gt; User&#10;```&#10;&#10;Notas:&#10;- Las flechas sólidas indican dependencias en tiempo de ejecución (inyección/uso directo). Las punteadas señalan dependencias de infraestructura (mensajería/correo).&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/arquitectura-clases.mmd">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/arquitectura-clases.mmd" />
              <option name="updatedContent" value="classDiagram&#10;    direction LR&#10;&#10;    class Sensor {&#10;      +processEvent(SensorEvent) SensorEvent&#10;      +requiresAlert(Double) boolean&#10;      +getSensorType() String&#10;      +simulateEvent() SensorEvent&#10;    }&#10;&#10;    class MotionSensor&#10;    class TemperatureSensor&#10;    class AccessControlSensor&#10;    Sensor &lt;|.. MotionSensor&#10;    Sensor &lt;|.. TemperatureSensor&#10;    Sensor &lt;|.. AccessControlSensor&#10;&#10;    class SensorSimulationService {&#10;      +simulateSensorEvents()&#10;      +simulateHighLoad()&#10;    }&#10;    class SensorProcessingService {&#10;      +processEventAsync(SensorEvent) CompletableFuture&#10;      +processBatchAsync(List~SensorEvent~) CompletableFuture&#10;      +buildStatsSnapshot() Map&#10;    }&#10;    class AlertService {&#10;      +createAlertFromEvent(SensorEvent) CompletableFuture~SecurityAlert~&#10;    }&#10;    class NotificationService {&#10;      +sendAlertNotifications(SecurityAlert)&#10;      +sendEventNotification(String, Object)&#10;    }&#10;    class StatsBroadcastService {&#10;      +broadcastStats()&#10;    }&#10;&#10;    class SecurityConfiguration&#10;    class WebSocketConfiguration&#10;    class AsyncConfiguration&#10;    class DataInitializer&#10;&#10;    class AuthenticationService&#10;    class JwtService&#10;    class JwtAuthenticationFilter&#10;&#10;    class SensorController&#10;    class AlertController&#10;    class AdminController&#10;    class AuthenticationController&#10;    class WebSocketController&#10;&#10;    class SensorEventRepository&#10;    class SecurityAlertRepository&#10;    class AccessLogRepository&#10;    class UserRepository&#10;&#10;    class SensorEvent&#10;    class SecurityAlert&#10;    class AccessLog&#10;    class User&#10;    class SensorType&#10;&#10;    SensorSimulationService --&gt; Sensor : usa&#10;    SensorSimulationService --&gt; SensorProcessingService : envía lotes&#10;    SensorProcessingService --&gt; Sensor : delega procesamiento&#10;    SensorProcessingService --&gt; SensorEventRepository : persiste&#10;    SensorProcessingService --&gt; NotificationService : WS stats/events&#10;    SensorProcessingService --&gt; AlertService : crea alertas&#10;&#10;    AlertService --&gt; SecurityAlertRepository : persiste&#10;    AlertService --&gt; NotificationService : notifica&#10;&#10;    NotificationService ..&gt; SimpMessagingTemplate : WebSocket&#10;    NotificationService ..&gt; JavaMailSender : Email&#10;&#10;    AuthenticationController --&gt; AuthenticationService : login&#10;    SecurityConfiguration --&gt; JwtAuthenticationFilter : cadena&#10;    JwtAuthenticationFilter --&gt; JwtService : valida JWT&#10;&#10;    AdminController ..&gt; UserService&#10;    UserService --&gt; UserRepository&#10;    DataInitializer --&gt; UserService&#10;&#10;    WebSocketController ..&gt; SimpMessagingTemplate&#10;&#10;    StatsBroadcastService ..&gt; SensorProcessingService&#10;&#10;    SensorEventRepository --&gt; SensorEvent&#10;    SecurityAlertRepository --&gt; SecurityAlert&#10;    AccessLogRepository --&gt; AccessLog&#10;    UserRepository --&gt; User" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>